# -*- coding: utf-8 -*-
"""Copy of Task7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MhaeBjmwxbu8B9o5Dt4H1DYrwVxrH2ZF

#NumPy

##1. How to extract all odd numbers from arr?
"""

import numpy as np
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
newarr=arr[np.array(arr%2!=0)]
print(newarr)

"""##2. Replace all odd numbers in arr with -1 without changing"""

import numpy as np
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
arr[arr%2!=0]=-1
print(arr)

"""##3.  Convert a 1D array to a 2D array with 2 rows


"""

import numpy as np
arr=np.arange(10)
newarr=arr.reshape(2,5)
print(newarr)
#Desired Output:
#> array([[0, 1, 2, 3, 4],
#>        [5, 6, 7, 8, 9]])

"""##4. Stack arrays a and b vertically


"""

import numpy as np
a = np.arange(10).reshape(2,-1)
b = np.repeat(1, 10).reshape(2,-1)
arr=np.vstack((a,b))
print(arr)
#Desired Output:

#> array([[0, 1, 2, 3, 4],
#>        [5, 6, 7, 8, 9],
#>        [1, 1, 1, 1, 1],
#>        [1, 1, 1, 1, 1]])

"""##5. Stack the arrays a and b horizontally.


"""

import numpy as np
a = np.arange(10).reshape(2,-1)
b = np.repeat(1, 10).reshape(2,-1)
arr=np.hstack((a,b))
print(arr)
#Desired Output:

#> array([[0, 1, 2, 3, 4, 1, 1, 1, 1, 1],
#>        [5, 6, 7, 8, 9, 1, 1, 1, 1, 1]])

"""##6.How to get the common items between two python numpy arrays?
Get the common items between a and b



"""

import numpy as np
a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])
x=np.array(a==b)
print("index corresponding to commom items:",x)
print("common items:",a[x])

"""##7.How to remove from one array those items that exist in another?
Q. From array a remove all items present in array b
"""

import numpy as np

a = np.array([1,2,3,4,5])
b = np.array([5,6,7,8,9])
x=set(a)-set(b)
print([list(x)])

"""##8. How to get the positions where elements of two arrays match?

Q. Get the positions where elements of a and b match


"""

import numpy as np
a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])
x=np.where(a==b)
print(x)

#Desired Output:

#> (array([1, 3, 5, 7]),)

"""##9. How to extract all numbers between a given range from a numpy array?
Get all items between 5 and 10 from a
"""

import numpy as np

a = np.array([2, 6, 1, 9, 10, 3, 27])
x=a[(a>5) & (a<10)]
print(x)
#Desired Output:

#(array([6, 9, 10]),)

"""#Pandas

##Pandas Data Series

##1. Write a Pandas program to convert a dictionary to a Pandas series.

```
Sample Series:
Original dictionary:
{'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 800}

Converted series:
a    100
b    200
c    300
d    400
e    800
dtype: int64

```
"""

import pandas as pd
Original_dictionary={'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 800}
Converted_series=pd.Series(Original_dictionary)
print(Converted_series)

"""##2. Write a Pandas program to convert a NumPy array to a Pandas series.
```
Sample Series:
  NumPy array:
[10 20 30 40 50]
Converted Pandas series:
0    10
1    20
2    30
3    40
4    50
dtype: int64

```
"""

import numpy as np
import pandas as pd
NumPy_array=np.array([10,20,30,40,50],dtype=np.int64)
Converted_Pandas_series=pd.Series(NumPy_array)
print("Converted Pandas series")
print(Converted_Pandas_series)

"""##3. Write a Pandas program to change the data type of given a column or a Series.

```
Sample Series:
    Original Data Series:
0       100
1       200
2    python
3    300.12
4       400
dtype: object
Change the said data type to numeric:
0    100.00
1    200.00
2       NaN
3    300.12
4    400.00
dtype: float64

```
"""

import pandas as pd
import numpy as np
Original_Data_Series=pd.Series([100,200,"python1",300.12,400])
print("Original Data Series:")
print(Original_Data_Series)
converted_series=pd.to_numeric(Original_Data_Series,errors="coerce")
print("Change the said data type to numeric:")
print(converted_series)

"""##4. Write a Pandas program to convert the first column of a DataFrame as a Series.

```
Sample Output:  
Original DataFrame
   col1  col2  col3
0     1     4     7
1     2     5     5
2     3     6     8
3     4     9    12
4     7     5     1
5    11     0    11

1st column as a Series:
0     1
1     2
2     3
3     4
4     7
5    11
Name: col1, dtype: int64
<class 'pandas.core.series.Series'>

```
"""

import pandas as pd
Original={"col1":[1,2,3,4,7,11],"col2":[4,5,6,9,5,0],"col3":[7,5,8,12,1,11]}
Original_DataFrame=pd.DataFrame(Original)
print("Original DataFrame")
print(Original_DataFrame)
print("1st column as a Series:")
col=Original_DataFrame.iloc[:,0]
print(col)
print(type(col))

"""##5. Write a Pandas program to convert a given Series to an array.

```
Sample Output:
Original Data Series:
0       100
1       200
2    python
3    300.12
4       400
dtype: object
Series to an array
['100' '200' 'python' '300.12' '400']
<class 'numpy.ndarray'>

```
"""

import pandas as pd
import numpy as np
Original_Data_Series=pd.Series(['100',"200","python1","300.12","400"])
print("Original Data Series:")
print(Original_Data_Series)
print("Series to an array")
series=np.array(Original_Data_Series)
print(series)
print(type(series))

"""##6 Write a Pandas program to convert Series of lists to one Series.
```
Sample Output:
Original Series of list
0    [Red, Green, White]
1           [Red, Black]
2               [Yellow]
dtype: object
One Series
0       Red
1     Green
2     White
3       Red
4     Black
5    Yellow
dtype: object

```
"""

import pandas as pd
Original_Series=pd.Series([["Red","Green","White"],["Red","Black"],["Yellow"]])
print("Original Series of list")
print(Original_Series)
One_Series=Original_Series.explode()
print("One Series")
print(One_Series)

"""##7.Write a Pandas program to sort a given Series.
```
Sample Output:
Original Data Series:
0       100
1       200
2    python
3    300.12
4       400
dtype: object
0       100
1       200
3    300.12
4       400
2    python
dtype: object
```
"""

import pandas as pd
Original_Data_Series=pd.Series(['100',"200","python","300.12","400"])
print("Original Data Series")
print(Original_Data_Series)
Sorted_series=Original_Data_Series.sort_values()
print(Sorted_series)

"""##Pandas DataFrame

##1.Write a Pandas program to create a dataframe from a dictionary and display it.
```
Sample data: {'X':[78,85,96,80,86], 'Y':[84,94,89,83,86],'Z':[86,97,96,72,83]}
Expected Output:
    X   Y   Z                                                         
0  78  84  86                                                        
1  85  94  97                                                         
2  96  89  96                                                      
3  80  83  72                                                         
4  86  86  83

```
"""

import pandas as pd
Sample_data= {'X':[78,85,96,80,86], 'Y':[84,94,89,83,86],'Z':[86,97,96,72,83]}
Expected_output=pd.DataFrame(Sample_data)
print("Expected Output")
print(Expected_output)

"""##2. Write a Pandas program to create and display a DataFrame from a specified dictionary data which has the index labels.
```
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```

```
Expected Output:
   attempts       name qualify  score                              
a         1  Anastasia     yes   12.5                                 
b         3       Dima      no    9.0                                 
....                              
i         2      Kevin      no    8.0                                
j         1      Jonas     yes   19.0

```
"""

import pandas as pd
import numpy as np
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
Expected_output=pd.DataFrame(exam_data,index=labels)
print("Expected Output")
print(Expected_output)

"""##3. Write a Pandas program to get the first 3 rows of a given DataFrame.
```
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```

```
Expected Output:
First three rows of the data frame:                                   
   attempts       name qualify  score                              
a         1  Anastasia     yes   12.5                                 
b         3       Dima      no    9.0                                 
c         2  Katherine     yes   16.5

```
"""

import pandas as pd
import numpy as np
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
Expected_output=pd.DataFrame(exam_data,index=labels)
print("First three rows of the data frame:")
print(Expected_output.head(3))

"""##4.Write a Pandas program to select the 'name' and 'score' columns from the following DataFrame.

```
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```
```
Expected Output:
Select specific columns:                                               
        name  score                                                  
a  Anastasia   12.5                                                   
b       Dima    9.0                                                
c  Katherine   16.5                                                    
...                                                  
h      Laura    NaN                                                   
i      Kevin    8.0                                                  
j      Jonas   19.0
```
"""

import numpy as np
import pandas as pd
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
Select_specific_columns=pd.DataFrame(exam_data,index=labels)
print("select specific columns")
selected_columns=Select_specific_columns[['name','score']]
print(selected_columns)

"""##5.  Write a Pandas program to select the specified columns and rows from a given data frame.
```
Sample Python dictionary data and list labels:
Select 'name' and 'score' columns in rows 1, 3, 5, 6 from the following data frame.
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```
```
Expected Output:
Select specific columns and rows:
   score qualify
b    9.0      no
d    NaN      no
f   20.0     yes
g   14.5     yes

```
"""



import pandas as pd
import numpy as np
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
data=pd.DataFrame(exam_data,index=labels)
print("Select specific columns and rows:")
selection_columns=data[["name","score"]]
print(selection_columns.iloc[[1,3,5,6]])

"""##6. Write a Pandas program to select the rows where the number of attempts in the examination is greater than 2.

```
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```

```
Expected Output:
Number of attempts in the examination is greater than 2:
      name  score  attempts qualify
b     Dima    9.0         3      no
d    James    NaN         3      no
f  Michael   20.0         3     yes

```
"""

import pandas as pd
import numpy as np
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
Expected_Output=pd.DataFrame(exam_data,index=labels)
print("Number of attempts in the examination is greater than 2:")
print(Expected_Output[Expected_Output["attempts"]>2])



"""##7. Write a Pandas program to select the rows where the score is missing, i.e. is NaN.

```
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```

```
Expected Output:
Rows where score is missing:
   attempts   name qualify  score
d         3  James      no    NaN
h         1  Laura      no    NaN

```
"""

import pandas as pd
import numpy as np
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g','h','i','j']
Expected_Output=pd.DataFrame(exam_data,index=labels)
print("Rows where score is missing:")
print(Expected_Output[Expected_Output["score"].isnull()])

"""##8. Write a Pandas program to select the rows the score is between 15 and 20 (inclusive).
```
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```
```
Expected Output:
Rows where score between 15 and 20 (inclusive):                        
   attempts       name qualify  score                                  
c         2  Katherine     yes   16.5                                
f         3    Michael     yes   20.0                                 
j         1      Jonas     yes   19.0
```

"""

import pandas as pd
import numpy as np
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
Expected_Output=pd.DataFrame(exam_data,index=labels)
print("Rows where score between 15 and 20 (inclusive):")
print(Expected_Output[Expected_Output['score'].between(15,20)])

"""##9. Write a Pandas program to select the rows where number of attempts in the examination is less than 2 and score greater than 15.

```
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```
```
Expected Output:
Number of attempts in the examination is less than 2 and score greater than 15 :
    name  score  attempts qualify
j  Jonas   19.0         1     yes

```
"""

import pandas as pd
import numpy as np
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
Expected_Output=pd.DataFrame(exam_data,index=labels)
print("Number of attempts in the examination is less than 2 and score greater than 15 :")
Sorted_attemps=Expected_Output[Expected_Output["attempts"]<2]
print(Sorted_attemps[Sorted_attemps['score']>15])

"""##10. Write a Pandas program to change the score in row 'd' to 11.5.

```
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

```

```
Expected Output:
Change the score in row 'd' to 11.5:                                  
   attempts       name qualify  score                                
a         1  Anastasia     yes   12.5                               
b         3       Dima      no    9.0                                
c         2  Katherine     yes   16.5
...                                
i         2      Kevin      no    8.0                                 
j         1      Jonas     yes   19.0

```
"""

import pandas as pd
import numpy as np
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
Expected_Output=pd.DataFrame(exam_data,index=labels)
print("Change the score in row 'd' to 11.5:")
Expected_Output.loc['d','score']=11.5
print(Expected_Output)

"""##11. Write a Pandas program to calculate the sum of the examination attempts by the students.
```
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```
```
Expected Output:
Sum of the examination attempts by the students:                     
19
```
"""

import pandas as pd
import numpy as np
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
Expected_Output=pd.DataFrame(exam_data,index=labels)
sum_of_attempts=Expected_Output['attempts'].sum()
print('Sum of the examination attempts by the students:')
print(sum_of_attempts)

"""##12. Write a Pandas program to calculate the mean of all students' scores. Data is stored in a dataframe.
```
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```
```
Expected Output:
Mean score for each different student in data frame:                  
13.5625
```
"""

import pandas as pd
import numpy as np
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
Expected_Output=pd.DataFrame(exam_data,index=labels)
mean_score=Expected_Output['score'].mean()
print("Mean score for each different student in data frame:")
print(mean_score)

"""##13. Write a Pandas program to replace the 'qualify' column contains the values 'yes' and 'no' with True and False.

```
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```

```
Expected Output:
Replace the 'qualify' column contains the values 'yes' and 'no'  with T
rue and  False:                                                      
   attempts       name  qualify  score                              
a         1  Anastasia     True   12.5                          
b         3       Dima    False    9.0                              
......                           
i         2      Kevin    False    8.0                                 
j         1      Jonas     True   19.0
```
"""

import pandas as pd
import numpy as np
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
Expected_Output=pd.DataFrame(exam_data,index=labels)
Expected_Output["qualify"]=Expected_Output["qualify"].map({"yes":True, "no":False})
print("Replace the 'qualify' column contains the values 'yes' and 'no'  with True and  False:")
print(Expected_Output)

"""##14. Write a Pandas program to change the name 'James' to 'Suresh' in name column of the DataFrame.

```
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```
```
Expected Output:
Change the name 'James' to \?Suresh\?:                                
   attempts       name qualify  score                                  
a         1  Anastasia     yes   12.5                                  
b         3       Dima      no    9.0                                  
.......                               
i         2      Kevin      no    8.0                                 
j         1      Jonas     yes   19.0
```
"""

import pandas as pd
import numpy as np
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
Expected_Output=pd.DataFrame(exam_data,index=labels)
Expected_Output.loc[Expected_Output["name"]=='James',"name"]="Suresh"
print("Change the name 'James' to \?Suresh\?:")
print(Expected_Output)

"""##15. Write a Pandas program to delete the 'attempts' column from the DataFrame.
```
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```
```
Expected Output:
Delete the 'attempts' column from the data frame:                    
        name qualify  score                                          
a  Anastasia     yes   12.5                                           
b       Dima      no    9.0                                          
.....                                       
i      Kevin      no    8.0                                          
j      Jonas     yes   19.0
```
"""

import pandas as pd
import numpy as np
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
Expected_Output=pd.DataFrame(exam_data,index=labels)
Expected_Output=Expected_Output.drop(["attempts"],axis=1)
print("Delete the 'attempts' column from the data frame:")
print(Expected_Output)

"""##16.  Write a Pandas program to insert a new column in existing DataFrame.

```
Sample Python dictionary data and list labels:
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```
```
Expected Output:
New DataFrame after inserting the 'color' column                       
   attempts       name qualify  score   color                       
a         1  Anastasia     yes   12.5     Red                         
b         3       Dima      no    9.0    Blue                        
.......                     
i         2      Kevin      no    8.0   Green                        
j         1      Jonas     yes   19.0     Red
```
"""

import pandas as pd
import numpy as np
exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
Expected_Output=pd.DataFrame(exam_data,index=labels)
color=["Red","Blue","Orange","Red","White","White","Blue","Green","Green","Red"]
Expected_Output["color"]=color
print(Expected_Output)

"""##17.  Write a Pandas program to rename columns of a given DataFrame

```
Sample data:
Original DataFrame
   col1  col2  col3
0     1     4     7
1     2     5     8
2     3     6     9
New DataFrame after renaming columns:
   Column1  Column2  Column3
0        1        4        7
1        2        5        8
2        3        6        9
```
"""

import pandas as pd
Original_DataFrame={"col1":[1,2,3],"col2":[4,5,6],"col3":[7,8,9]}
Expected_Output=pd.DataFrame(Original_DataFrame)
print('Original DataFrame')
print(Expected_Output)
Expected_Output=Expected_Output.rename(columns={"col1":"column1","col2":"column2","col3":"column3"})
print("New DataFrame after renaming columns:")
print(Expected_Output)

"""##18. Write a Pandas program to select rows from a given DataFrame based on values in some columns.
```
Sample data:
Original DataFrame
   col1  col2  col3
0     1     4     7
1     4     5     8
2     3     6     9
3     4     7     0
4     5     8     1
Rows for colum1 value == 4
   col1  col2  col3
1     4     5     8
3     4     7     0
```
"""

import pandas as pd
Original_DataFrame={"col1":[1,4,3,4,5],"col2":[4,5,6,7,8],"col3":[7,8,9,0,1]}
Expected_Output=pd.DataFrame(Original_DataFrame)
print("Original DataFrame")
print(Expected_Output)
Output=Expected_Output.loc[Expected_Output["col1"]==4]
print("Rows for colum1 value == 4")
print(Output)

"""##19. Write a Pandas program to add one row in an existing DataFrame.

```
Sample data:
Original DataFrame
   col1  col2  col3
0     1     4     7
1     4     5     8
2     3     6     9
3     4     7     0
4     5     8     1
After add one row:
   col1  col2  col3
0     1     4     7
1     4     5     8
2     3     6     9
3     4     7     0
4     5     8     1
5    10    11    12
```
"""

import pandas as pd
import numpy as np
data={"col1":[1,4,3,4,5],"col2":[4,5,6,7,8],"col3":[7,8,9,0,1]}
Original_DataFrame=pd.DataFrame(data)
new_row={"col1":10,"col2":11,"col3":12}
Original_DataFrame=Original_DataFrame.append(new_row, ignore_index=True)
print(Original_DataFrame)

"""##20. Write a Pandas program to replace all the NaN values with Zero's in a column of a dataframe.

```
Sample data:
Original DataFrame

   attempts       name qualify  score
0         1  Anastasia     yes   12.5
1         3       Dima      no    9.0
2         2  Katherine     yes   16.5
.....
8         2      Kevin      no    8.0
9         1      Jonas     yes   19.0

```
```

New DataFrame replacing all NaN with 0:
   attempts       name qualify  score
0         1  Anastasia     yes   12.5
1         3       Dima      no    9.0
2         2  Katherine     yes   16.5
.....
8         2      Kevin      no    8.0
9         1      Jonas     yes   19.0
```
"""

import pandas as pd
import numpy as np
Expected_Output={"attempts":[1,3,2,np.nan,2,3,np.nan,1,2,1],
                 "name":["Anastasia","Dima","Katherine","John","Lione1","Jane","Emma","Kevin","Jonas","Maria"],
                 "quality":['yes','no','yes','no','no','yes','yes','no','yes','yes'],
                 "score":[12.5,9.0,16.5,np.nan,8.0,13.0,np.nan,8.0,19.0,np.nan]}
Original_DataFrame=pd.DataFrame(Expected_Output)
Original_DataFrame["score"]=Original_DataFrame["score"].fillna(0)
print("New DataFrame replacing all NaN with 0:")
print(Original_DataFrame)

"""##21. Write a Pandas program to count the NaN values in one or more columns in DataFrame.
```
Sample data:
Original DataFrame
   attempts       name qualify  score
0         1  Anastasia     yes   12.5
1         3       Dima      no    9.0
2         2  Katherine     yes   16.5
3         3      James      no    NaN
4         2      Emily      no    9.0
5         3    Michael     yes   20.0
6         1    Matthew     yes   14.5
7         1      Laura      no    NaN
8         2      Kevin      no    8.0
9         1      Jonas     yes   19.0

Number of NaN values in one or more columns:
2

```
"""

import pandas as pd
import numpy as np
Expected_Output={'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualify': ['yes', 'no',"yes","no","no","yes","yes", 'no',"no", 'yes']}
Original_DataFrame=pd.DataFrame(Expected_Output)
nan_count=Original_DataFrame.isnull().sum().sum()
print("Number of NaN values in one or more columns:",nan_count)

"""##22. Write a Pandas program to drop a list of rows from a specified DataFrame.
```
Sample data:
Original DataFrame
   col1  col2  col3
0     1     4     7
1     4     5     8
2     3     6     9
3     4     7     0
4     5     8     1


New DataFrame after removing 2nd & 4th rows:
   col1  col2  col3
0     1     4     7
1     4     5     8
3     4     7     0
```
"""

import pandas as pd
data={"col1":[1,4,3,4,5],"col2":[4,5,6,7,8],"col3":[7,8,9,0,1]}
Expected_Output=pd.DataFrame(data)
print("New DataFrame after removing 2nd & 4th rows:")
Expected_Output=Expected_Output.drop(Expected_Output.index[[2,4]])
print(Expected_Output)

"""##23. . Write a Pandas program to convert DataFrame column type from string to datetime.

```

Sample data:
String Date:
0    3/11/2000
1    3/12/2000
2    3/13/2000
dtype: object


Original DataFrame (string to datetime):
           0
0 2000-03-11
1 2000-03-12
2 2000-03-13
```
"""

import pandas as pd
import numpy as np
Expected_Output=pd.Series(["3/11/2000","3/12/2000","3/13/2000"])
print("String Date:")
print(Expected_Output)
Original_DataFrame=pd.to_datetime(pd.Series(Expected_Output))
Original_Output=pd.DataFrame(Original_DataFrame)
print("Original DataFrame (string to datetime):")
print(Original_Output)

"""##24. Write a Pandas program to find the row for where the value of a given column is maximum.

```
Sample Output:
Original DataFrame
   col1  col2  col3
0     1     4     7
1     2     5     8
2     3     6    12
3     4     9     1
4     7     5    11
Row where col1 has maximum value:
4
Row where col2 has maximum value:
3
Row where col3 has maximum value:
2
```
"""

import pandas as pd
Original_DataFrame={"col1":[1,2,3,4,7],"col2":[4,5,6,9,5],"col3":[7,8,12,1,11]}
Expected_Output=pd.DataFrame(Original_DataFrame)
print("Original DataFrame")
print(Expected_Output)
for col in Expected_Output.columns:
    maximum_value=Expected_Output[col].idxmax()
    print(f"Row where {col} has maximum value:")
    print(maximum_value)

"""##25. Write a Pandas program to get the datatypes of columns of a DataFrame.

```
Sample data:
Original DataFrame:
   attempts       name qualify  score
0         1  Anastasia     yes   12.5
1         3       Dima      no    9.0
.......
8         2      Kevin      no    8.0
9         1      Jonas     yes   19.0
Data types of the columns of the said DataFrame:
attempts      int64
name         object
qualify      object
score       float64
dtype: object
```
"""

import pandas as pd
import numpy as np
Original_Data={"attempts":[1,3,2, 3, 2, 3, 1, 1,2,1],
               "name":['Anastasia',"Dima",'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura',"Kevin","Jonas"],
              "quality":["yes","no","yes","no","no","yes","yes","no","no",'yes'],
               "score":[12.5,9.0,16.5, np.nan, 9, 20, 14.5, np.nan,8.0,19.0]}
Original_DataFrame=pd.DataFrame(Original_Data)
data_type=Original_DataFrame.dtypes
print("Data types of the columns of the said DataFrame:")
print(data_type)

"""##26. Write a Pandas program to group by the first column and get second column as lists in rows.

```
Sample data:
Original DataFrame
col1 col2
0 C1 1
1 C1 2
2 C2 3
3 C2 3
4 C2 4
5 C3 6
6 C2 5


Group on the col1:
col1
C1 [1, 2]
C2 [3, 3, 4, 5]
C3 [6]
Name: col2, dtype: object
```
"""

import pandas as pd
Original_DataFrame={"col1":['C1',"C1","C2","C2","C2","C3","C2"],"col2":[1,2,3,3,4,6,5]}
Expected_output=pd.DataFrame(Original_DataFrame)
print("Origanl DataFrame")
print(Expected_output)
Expected_output=Expected_output.groupby('col1')['col2'].apply(list)
print("Group on the col1:")
print(Expected_output)

"""##27  Write a Pandas program to count number of columns of a DataFrame.

```
Sample Output:
Original DataFrame
  col1 col2 col3
0  1    4   7
1  2    5   8
2  3    6   12
3  4    9   1
4  7    5   11

Number of columns:
3
```
"""

import pandas as pd
Output={'col1':[1,2,3,4,7],'col2':[4,5,6,9,5],'col3':[7,8,12,1,11]}
Expected_output=pd.DataFrame(Output)
print("Original DataFrame")
print(Expected_output)
print("Number of columns:")
print(len(Expected_output.columns))

"""##28.  Write a Pandas program to get first n records of a DataFrame.

```
Sample Output:
Original DataFrame
col1 col2 col3
0 1 4 7
1 2 5 5
2 3 6 8
3 4 9 12
4 7 5 1
5 11 0 11

First 3 rows of the said DataFrame':
col1 col2 col3
0 1 4 7
1 2 5 5
2 3 6 8
```

"""

import pandas as pd
Original_DataFrame={"col1":[1,2,3,4,7,11],"col2":[4,5,6,9,5,0],"col3":[7,5,8,12,1,11]}
Output=pd.DataFrame(Original_DataFrame)
print("Original DataFrame")
print(Output)
print("First 3 rows of the said DataFrame:")
print(Output.loc[[0,1,2]])

"""##29. Write a Pandas program to get last n records of a DataFrame.

```
Sample Output:
Original DataFrame
col1 col2 col3
0 1 4 7
1 2 5 5
2 3 6 8
3 4 9 12
4 7 5 1
5 11 0 11

Last 3 rows of the said DataFrame':
col1 col2 col3
3 4 9 12
4 7 5 1
5 11 0 11
```
"""

import pandas as pd
Original_DataFrame={"col1":[1,2,3,4,7,11],"col2":[4,5,6,9,5,0],"col3":[7,5,8,12,1,11]}
Output=pd.DataFrame(Original_DataFrame)
print("Original DataFrame")
print(Output)
print("Last 3 rows of the said DataFrame':")
print(Output.tail(3))

"""##30.  Write a Pandas program to get topmost n records within each group of a DataFrame.

```
Sample Output:
Original DataFrame
col1 col2 col3
0 1 4 7
1 2 5 5
2 3 6 8
3 4 9 12
4 7 5 1
5 11 0 11

```
```
topmost n records within each group of a DataFrame:
col1 col2 col3
5 11 0 11
4 7 5 1
3 4 9 12
col1 col2 col3
3 4 9 12
2 3 6 8
1 2 5 5
4 7 5 1
col1 col2 col3
3 4 9 12
5 11 0 11
2 3 6 8
```
"""

import pandas as pd
Original_DataFrame={"col1":[1,2,3,4,7,11],"col2":[4,5,6,9,5,0],"col3":[7,5,8,12,1,11]}
Output=pd.DataFrame(Original_DataFrame)
print("Original DataFrame")
print(Output)
print("topmost n records within each group of a DataFrame:")
for col in Output.columns:
    print(Output.nlargest(3,col))

"""##31. Write a Pandas program to add a prefix or suffix to all columns of a given DataFrame.

```
Sample Output:
Original DataFrame
W X Y Z
0 68 78 84 86
1 75 85 94 97
2 86 96 89 96
3 80 80 83 72
4 66 86 86 83

Add prefix:
A_W A_X A_Y A_Z
0 68 78 84 86
1 75 85 94 97
2 86 96 89 96
3 80 80 83 72
4 66 86 86 83

Add suffix:
W_1 X_1 Y_1 Z_1
0 68 78 84 86
1 75 85 94 97
2 86 96 89 96
3 80 80 83 72
4 66 86 86 83

```
"""

import pandas as pd
Original_DataFrame={"W":[68,75,86,80,66],"X":[78,85,96,80,86],"Y":[84,94,89,83,86],"Z":[86,97,96,72,83]}
Expected_Output=pd.DataFrame(Original_DataFrame)
print("Original DataFrame")
print(Expected_Output)
print("Add Prefix:")
print(Expected_Output.add_prefix("A_"))
print("Add suffix:")
print(Expected_Output.add_suffix("_1"))

"""##32. Write a Pandas program to convert continuous values of a column in a given DataFrame to categorical.
```
Input:
{ 'Name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Syed Wharton'],
'Age': [18, 22, 40, 50, 80, 5] }


Output:
Age group:
0 kids
1 adult
2 elderly
3 adult
4 elderly
5 kids
Name: age_groups, dtype: category
Categories (3, object): [kids < adult < elderly]
```
"""

import pandas as pd
data={ 'Name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Syed Wharton'],
'Age': [18, 22, 40, 50, 80] }
Original_data=pd.DataFrame(data)
print("Age group")
bins=[0,18,60,Original_data["Age"].max()]
labels=["kids","adult",'elderly']
Original_data["age_groups"]=pd.cut(Original_data["Age"],bins=bins,labels=labels,right=False)
print(Original_data["age_groups"])

"""##33. Write a Pandas program to append rows to an existing DataFrame and display the combined data.

```
Test Data:
tudent_data1
  student_id              name  marks
0         S1  Danniella Fenton    200
1         S2      Ryder Storey    210
2         S3      Bryce Jensen    190
3         S4         Ed Bernal    222
4         S5       Kwame Morin    199


New Row(s)
student_id                  S6
name          Scarlette Fisher
marks                      205
dtype: object
```
"""

import pandas as pd
student_data1={"student_id ":["S1","S2","S3","S4","S5"],
               "name":["Danniella Fenton","Ryder Storey ","Bryce Jensen","Ed Bernal","Kwame Morin"],
               "marks":[200,210,190,222,199]}
Expected_output=pd.DataFrame(student_data1)
row={"student_id ":"S6","name":"Scarlette Fisher","marks":205}
Expected_output=Expected_output.append(row,ignore_index=True)
print(Expected_output)

"""##34  Write a Pandas program to join the two given dataframes along rows and merge with another dataframe along the common column id.

```
Test Data:
student_data1:
  student_id              name  marks
0         S1  Danniella Fenton    200
1         S2      Ryder Storey    210
2         S3      Bryce Jensen    190
3         S4         Ed Bernal    222
4         S5       Kwame Morin    199
student_data2:
  student_id              name  marks
0         S4  Scarlette Fisher    201
1         S5  Carla Williamson    200
2         S6       Dante Morse    198
3         S7    Kaiser William    219
4         S8   Madeeha Preston    201
```
```

exam_data:
   student_id  exam_id
0          S1       23
1          S2       45
2          S3       12
3          S4       67
4          S5       21
5          S7       55
6          S8       33
7          S9       14
8         S10       56
9         S11       83
10        S12       88
11        S13       12
```

"""

import pandas as pd
student_data1={"student_id ":["S1","S2","S3","S4","S5"],
               "name":["Danniella Fenton","Ryder Storey ","Bryce Jensen","Ed Bernal","Kwame Morin"],
               "marks":[200,210,190,222,199]}
Expected_output1=pd.DataFrame(student_data1)
student_data2={"student_id":["S4","S5","S6","S7","S8"],
               "name":["Scarlette Fisher","Carla Williamson","Dante Morse","Dante Morse"," Madeeha Preston"],
               "marks":[201,200,198,219,201]}
Expected_output2=pd.DataFrame(student_data2)
exam_data={"student_id":["S1","S2","S3","S4","S5","S7","S8","S9","S10","S11","S12","S13"],
           "exam_id":[23,45,12,67,21,55,33,14,56,83,88,12]}
Expected_output3=pd.DataFrame(exam_data)
combined=pd.concat([Expected_output,Expected_output2],ignore_index=True)
data=pd.merge(combined,exam_data,on='student_id')
print(data)